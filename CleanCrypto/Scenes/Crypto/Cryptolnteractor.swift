//
//  CryptoInteractor.swift
//  CleanStore
//
//  Created by Jo√£o Pedro Giarrante on 27/09/20.
//  Copyright (c) 2020 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CryptoBusinessLogic {
    func fetchCrypto(request: CryptoModels.FetchCrypto.Request)
}

protocol CryptoDataStore {
    var crypto: CryptoModels.FetchCrypto.Response? { get set }
}

class CryptoInteractor: CryptoBusinessLogic, CryptoDataStore {
    var crypto: CryptoModels.FetchCrypto.Response?
    var presenter: CryptoPresentationLogic?
    var cryptoWorker: CryptoNetworkLogic?
    
    init(cryptoWorker: CryptoNetworkLogic = CryptoWorker()) {
        self.cryptoWorker = cryptoWorker
    }
    
    // MARK: Fetch Crypto
    
    func fetchCrypto(request: CryptoModels.FetchCrypto.Request) {
        displayLoading()
        disableDetailButton()
        cryptoWorker?.fetchCrypto(ticket: request.ticket, currency: request.currency)
            .done(handleFetchCryptoSuccess)
            .catch(handleFetchCryptoError)
            .finally {
                self.removeLoading()
            }
    }
    
    private func handleFetchCryptoSuccess(response: CryptoModels.FetchCrypto.Response){
        crypto = response
        presenter?.presentFetchedCrypto(response: crypto!)
        enableDetailButton()
    }
    
    private func handleFetchCryptoError(error: Error) {
        presenter?.presentCryptoError(error: error)
    }
    
    private func displayLoading() {
        presenter?.presentScreenLoading()
    }
    
    private func removeLoading() {
        presenter?.hideScreenLoading()
    }
    
    private func enableDetailButton() {
        presenter?.enableDetailButton()
    }
    
    private func disableDetailButton() {
        presenter?.disableDetailButton()
    }
}
