//
//  CryptoDetailViewController.swift
//  CleanCrypto
//
//  Created by Jo√£o Pedro Giarrante on 28/09/20.
//  Copyright (c) 2020 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CryptoDetailDisplayLogic: class {
    func displayCryptoData(viewModel: CryptoDetailModels.SelectedCrypto.ViewModel)
    func displayError()
}

class CryptoDetailViewController: UIViewController, CryptoDetailDisplayLogic {
    var interactor: CryptoDetailBusinessLogic?
    var router: (NSObjectProtocol & CryptoDetailRoutingLogic & CryptoDetailDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CryptoDetailInteractor()
        let presenter = CryptoDetailPresenter()
        let router = CryptoDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        getCryptoData()
    }
    
    // MARK: Functions
    
    fileprivate func setupView(){ }
    
    
    @IBOutlet weak var lblTicket: UILabel!
    @IBOutlet weak var lblCotacao: UILabel!
    @IBOutlet weak var lblVar24h: UILabel!
    @IBOutlet weak var lblVarMes: UILabel!
    @IBOutlet weak var lblVarAno: UILabel!
    
    // MARK: Do something
    
    func getCryptoData() {
        interactor?.getCryptoData()
    }
    
    func displayCryptoData(viewModel: CryptoDetailModels.SelectedCrypto.ViewModel) {
        lblTicket.text = viewModel.displayedCrypto.ticket
        lblCotacao.text = viewModel.displayedCrypto.price
        lblVar24h.text = viewModel.displayedCrypto.variacao24H
        lblVarMes.text = viewModel.displayedCrypto.variacaoMes
        lblVarAno.text = viewModel.displayedCrypto.variacaoAno
    }
    
    func displayError() {
        self.dismiss(animated: true, completion: nil)
    }
}
