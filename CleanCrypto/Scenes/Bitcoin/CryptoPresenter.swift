//
//  CryptoPresenter.swift
//  CleanStore
//
//  Created by João Pedro Giarrante on 27/09/20.
//  Copyright (c) 2020 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CryptoPresentationLogic
{
    func presentFetchedCrypto(response: CryptoModels.FetchCrypto.Response)
}

class CryptoPresenter: CryptoPresentationLogic
{
    weak var viewController: CryptoDisplayLogic?
    
    // MARK: Do something
    
    func presentFetchedCrypto(response: CryptoModels.FetchCrypto.Response)
    {
        var displayedCrypto: CryptoModels.FetchCrypto.ViewModel.DisplayedCrypto
        
        
        // Currency Symbol
        let locales: NSArray = NSLocale.availableLocaleIdentifiers as NSArray
        for localeID in locales as! [NSString] {
            let locale = NSLocale(localeIdentifier: localeID as String)
            let code = locale.object(forKey: NSLocale.Key.currencyCode) as? String
            
            
            if code == response.crypto.assetIDQuote {
                
                // Formatting Number
                let amount1 = Double(response.crypto.rate ?? 0)
                let numberFormatter = NumberFormatter()
                numberFormatter.numberStyle = .currency
                numberFormatter.locale = Locale(identifier: locale.localeIdentifier)
                let number = NSNumber(value: amount1)
                var price = numberFormatter.string(from: number)!
                if number == 0 {price = " Não Encontrado "}
                
                // Creating ViewModel
                displayedCrypto = CryptoModels.FetchCrypto.ViewModel.DisplayedCrypto(price: price, ticket: response.crypto.assetIDBase ?? " ? ")
                
                // Displaying
                let viewModel = CryptoModels.FetchCrypto.ViewModel(displayedCrypto: displayedCrypto)
                viewController?.displayFetchedCrypto(viewModel: viewModel)
            }
        }
    }
}
